{
  "contractName": "ProofUtils",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"AZTEC\",\"details\":\"Library of proof utility functions * Copyright 2020 Spilsbury Holdings Ltd  * Licensed under the GNU Lesser General Public Licence, Version 3.0 (the \\\"License\\\"); you may not use this file except in compliance with the License. * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details. * You should have received a copy of the GNU Lesser General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.*\",\"methods\":{},\"title\":\"ProofUtils\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aztec/protocol/contracts/libs/ProofUtils.sol\":\"ProofUtils\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@aztec/protocol/contracts/libs/ProofUtils.sol\":{\"keccak256\":\"0xd4a54fd4d28ae3ad84b8970c2b88398661d6c379cdabaac5e2d27337acba19ff\",\"urls\":[\"bzz-raw://ce53cd8592b739ee9d50009c3c8f762cbebfdef3f27ccc6397463d3be94cf650\",\"dweb:/ipfs/QmQok9trFyJdM2iDMKC5WtmCGdCETNZhrooaDaR6CLxSqH\"]}},\"version\":1}",
  "bytecode": "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158206cdf77644db30dc428cd416b7458cc448c04a7c01a377754a7309a62ff545b8e64736f6c63430005110032",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158206cdf77644db30dc428cd416b7458cc448c04a7c01a377754a7309a62ff545b8e64736f6c63430005110032",
  "sourceMap": "734:640:38:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24",
  "deployedSourceMap": "734:640:38:-;;;;;;;;",
  "source": "pragma solidity >= 0.5.0 <0.6.0;\n\n/**\n * @title ProofUtils\n * @author AZTEC\n * @dev Library of proof utility functions\n *\n * Copyright 2020 Spilsbury Holdings Ltd \n *\n * Licensed under the GNU Lesser General Public Licence, Version 3.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n**/\nlibrary ProofUtils {\n\n    /**\n     * @dev We compress three uint8 numbers into only one uint24 to save gas.\n     * Reverts if the category is not one of [1, 2, 3, 4].\n     * @param proof The compressed uint24 number.\n     * @return A tuple (uint8, uint8, uint8) representing the epoch, category and proofId.\n     */\n    function getProofComponents(uint24 proof) internal pure returns (uint8 epoch, uint8 category, uint8 id) {\n        assembly {\n            id := and(proof, 0xff)\n            category := and(div(proof, 0x100), 0xff)\n            epoch := and(div(proof, 0x10000), 0xff)\n        }\n        return (epoch, category, id);\n    }\n}\n",
  "sourcePath": "@aztec/protocol/contracts/libs/ProofUtils.sol",
  "ast": {
    "absolutePath": "@aztec/protocol/contracts/libs/ProofUtils.sol",
    "exportedSymbols": {
      "ProofUtils": [
        4959
      ]
    },
    "id": 4960,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4940,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:32:38"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": "@title ProofUtils\n@author AZTEC\n@dev Library of proof utility functions\n * Copyright 2020 Spilsbury Holdings Ltd \n * Licensed under the GNU Lesser General Public Licence, Version 3.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n * This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n * You should have received a copy of the GNU Lesser General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.*",
        "fullyImplemented": true,
        "id": 4959,
        "linearizedBaseContracts": [
          4959
        ],
        "name": "ProofUtils",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 4957,
              "nodeType": "Block",
              "src": "1158:214:38",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "id": {
                        "declaration": 4949,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1191:2:38",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 4942,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1201:5:38",
                        "valueSize": 1
                      }
                    },
                    {
                      "epoch": {
                        "declaration": 4945,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1279:5:38",
                        "valueSize": 1
                      }
                    },
                    {
                      "category": {
                        "declaration": 4947,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1226:8:38",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 4942,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1246:5:38",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 4942,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1296:5:38",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 4951,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    id := and(proof, 0xff)\n    category := and(div(proof, 0x100), 0xff)\n    epoch := and(div(proof, 0x10000), 0xff)\n}",
                  "src": "1168:160:38"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "components": [
                      {
                        "argumentTypes": null,
                        "id": 4952,
                        "name": "epoch",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4945,
                        "src": "1345:5:38",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 4953,
                        "name": "category",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4947,
                        "src": "1352:8:38",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 4954,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4949,
                        "src": "1362:2:38",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      }
                    ],
                    "id": 4955,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "1344:21:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint8_$_t_uint8_$_t_uint8_$",
                      "typeString": "tuple(uint8,uint8,uint8)"
                    }
                  },
                  "functionReturnParameters": 4950,
                  "id": 4956,
                  "nodeType": "Return",
                  "src": "1337:28:38"
                }
              ]
            },
            "documentation": "@dev We compress three uint8 numbers into only one uint24 to save gas.\nReverts if the category is not one of [1, 2, 3, 4].\n@param proof The compressed uint24 number.\n@return A tuple (uint8, uint8, uint8) representing the epoch, category and proofId.",
            "id": 4958,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getProofComponents",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4943,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4942,
                  "name": "proof",
                  "nodeType": "VariableDeclaration",
                  "scope": 4958,
                  "src": "1082:12:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint24",
                    "typeString": "uint24"
                  },
                  "typeName": {
                    "id": 4941,
                    "name": "uint24",
                    "nodeType": "ElementaryTypeName",
                    "src": "1082:6:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint24",
                      "typeString": "uint24"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1081:14:38"
            },
            "returnParameters": {
              "id": 4950,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4945,
                  "name": "epoch",
                  "nodeType": "VariableDeclaration",
                  "scope": 4958,
                  "src": "1119:11:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 4944,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1119:5:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4947,
                  "name": "category",
                  "nodeType": "VariableDeclaration",
                  "scope": 4958,
                  "src": "1132:14:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 4946,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1132:5:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4949,
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 4958,
                  "src": "1148:8:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 4948,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1148:5:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1118:39:38"
            },
            "scope": 4959,
            "src": "1054:318:38",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 4960,
        "src": "734:640:38"
      }
    ],
    "src": "0:1375:38"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "@aztec/protocol/contracts/libs/ProofUtils.sol",
      "exportedSymbols": {
        "ProofUtils": [
          4959
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            ">=",
            "0.5",
            ".0",
            "<",
            "0.6",
            ".0"
          ]
        },
        "id": 4940,
        "name": "PragmaDirective",
        "src": "0:32:38"
      },
      {
        "attributes": {
          "baseContracts": [
            null
          ],
          "contractDependencies": [
            null
          ],
          "contractKind": "library",
          "documentation": "@title ProofUtils\n@author AZTEC\n@dev Library of proof utility functions\n * Copyright 2020 Spilsbury Holdings Ltd \n * Licensed under the GNU Lesser General Public Licence, Version 3.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n * This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n * You should have received a copy of the GNU Lesser General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.*",
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            4959
          ],
          "name": "ProofUtils",
          "scope": 4960
        },
        "children": [
          {
            "attributes": {
              "documentation": "@dev We compress three uint8 numbers into only one uint24 to save gas.\nReverts if the category is not one of [1, 2, 3, 4].\n@param proof The compressed uint24 number.\n@return A tuple (uint8, uint8, uint8) representing the epoch, category and proofId.",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "getProofComponents",
              "scope": 4959,
              "stateMutability": "pure",
              "superFunction": null,
              "visibility": "internal"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "proof",
                      "scope": 4958,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint24",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint24",
                          "type": "uint24"
                        },
                        "id": 4941,
                        "name": "ElementaryTypeName",
                        "src": "1082:6:38"
                      }
                    ],
                    "id": 4942,
                    "name": "VariableDeclaration",
                    "src": "1082:12:38"
                  }
                ],
                "id": 4943,
                "name": "ParameterList",
                "src": "1081:14:38"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "epoch",
                      "scope": 4958,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint8",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint8",
                          "type": "uint8"
                        },
                        "id": 4944,
                        "name": "ElementaryTypeName",
                        "src": "1119:5:38"
                      }
                    ],
                    "id": 4945,
                    "name": "VariableDeclaration",
                    "src": "1119:11:38"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "category",
                      "scope": 4958,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint8",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint8",
                          "type": "uint8"
                        },
                        "id": 4946,
                        "name": "ElementaryTypeName",
                        "src": "1132:5:38"
                      }
                    ],
                    "id": 4947,
                    "name": "VariableDeclaration",
                    "src": "1132:14:38"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "id",
                      "scope": 4958,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint8",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint8",
                          "type": "uint8"
                        },
                        "id": 4948,
                        "name": "ElementaryTypeName",
                        "src": "1148:5:38"
                      }
                    ],
                    "id": 4949,
                    "name": "VariableDeclaration",
                    "src": "1148:8:38"
                  }
                ],
                "id": 4950,
                "name": "ParameterList",
                "src": "1118:39:38"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "externalReferences": [
                        {
                          "id": {
                            "declaration": 4949,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1191:2:38",
                            "valueSize": 1
                          }
                        },
                        {
                          "proof": {
                            "declaration": 4942,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1201:5:38",
                            "valueSize": 1
                          }
                        },
                        {
                          "epoch": {
                            "declaration": 4945,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1279:5:38",
                            "valueSize": 1
                          }
                        },
                        {
                          "category": {
                            "declaration": 4947,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1226:8:38",
                            "valueSize": 1
                          }
                        },
                        {
                          "proof": {
                            "declaration": 4942,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1246:5:38",
                            "valueSize": 1
                          }
                        },
                        {
                          "proof": {
                            "declaration": 4942,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1296:5:38",
                            "valueSize": 1
                          }
                        }
                      ],
                      "operations": "{\n    id := and(proof, 0xff)\n    category := and(div(proof, 0x100), 0xff)\n    epoch := and(div(proof, 0x10000), 0xff)\n}"
                    },
                    "children": [],
                    "id": 4951,
                    "name": "InlineAssembly",
                    "src": "1168:160:38"
                  },
                  {
                    "attributes": {
                      "functionReturnParameters": 4950
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "type": "tuple(uint8,uint8,uint8)"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 4945,
                              "type": "uint8",
                              "value": "epoch"
                            },
                            "id": 4952,
                            "name": "Identifier",
                            "src": "1345:5:38"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 4947,
                              "type": "uint8",
                              "value": "category"
                            },
                            "id": 4953,
                            "name": "Identifier",
                            "src": "1352:8:38"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 4949,
                              "type": "uint8",
                              "value": "id"
                            },
                            "id": 4954,
                            "name": "Identifier",
                            "src": "1362:2:38"
                          }
                        ],
                        "id": 4955,
                        "name": "TupleExpression",
                        "src": "1344:21:38"
                      }
                    ],
                    "id": 4956,
                    "name": "Return",
                    "src": "1337:28:38"
                  }
                ],
                "id": 4957,
                "name": "Block",
                "src": "1158:214:38"
              }
            ],
            "id": 4958,
            "name": "FunctionDefinition",
            "src": "1054:318:38"
          }
        ],
        "id": 4959,
        "name": "ContractDefinition",
        "src": "734:640:38"
      }
    ],
    "id": 4960,
    "name": "SourceUnit",
    "src": "0:1375:38"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.17+commit.d19bba13.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2021-12-22T16:36:24.336Z",
  "devdoc": {
    "author": "AZTEC",
    "details": "Library of proof utility functions * Copyright 2020 Spilsbury Holdings Ltd  * Licensed under the GNU Lesser General Public Licence, Version 3.0 (the \"License\"); you may not use this file except in compliance with the License. * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details. * You should have received a copy of the GNU Lesser General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.*",
    "methods": {},
    "title": "ProofUtils"
  },
  "userdoc": {
    "methods": {}
  }
}